name: BoldTake CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  # Job 1: Linting and Static Analysis
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run ESLint
        run: npm run lint
        
      - name: Check for console.logs
        run: |
          # Check only the core extension files for console.log statements
          # Excluding debug scripts, fix scripts, and vendor files
          EXTENSION_FILES="contentScript.js background.js popup.js auth.js"
          FILES_WITH_CONSOLE=""
          
          for file in $EXTENSION_FILES; do
            if [ -f "$file" ]; then
              # Check for console.log but allow debugLog and console.error/warn
              if grep -q "console\.log" "$file" 2>/dev/null; then
                # Count actual console.log occurrences (not debugLog assignments)
                COUNT=$(grep -c "console\.log\s*(" "$file" 2>/dev/null || true)
                if [ "$COUNT" -gt "0" ]; then
                  FILES_WITH_CONSOLE="$FILES_WITH_CONSOLE $file"
                fi
              fi
            fi
          done
          
          if [ -n "$FILES_WITH_CONSOLE" ]; then
            echo "‚ö†Ô∏è Warning: console.log found in:$FILES_WITH_CONSOLE"
            echo "Consider using debugLog instead for production code"
            # For now, don't fail the build - just warn
            exit 0
          else
            echo "‚úÖ No console.log statements found in core extension files"
          fi
          
      - name: Security audit
        run: npm audit --audit-level=moderate

  # Job 2: Unit Tests
  test:
    runs-on: ubuntu-latest
    needs: lint
    strategy:
      matrix:
        node-version: [16.x, 18.x, 20.x]
    steps:
      - uses: actions/checkout@v4
      
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run unit tests
        run: npm test
        
      - name: Generate coverage report
        run: npm run coverage
        
      # Codecov disabled - requires token to avoid rate limiting
      # To enable: Add CODECOV_TOKEN to repository secrets
      # - name: Upload coverage to Codecov
      #   uses: codecov/codecov-action@v3
      #   with:
      #     token: ${{ secrets.CODECOV_TOKEN }}
      #     file: ./coverage/lcov.info
      #     fail_ci_if_error: false

  # Job 3: Build and Bundle Analysis
  build:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build extension
        run: npm run build
        
      - name: Check bundle size
        run: |
          MAX_SIZE=5000000  # 5MB limit
          SIZE=$(du -b dist/ | cut -f1)
          if [ $SIZE -gt $MAX_SIZE ]; then
            echo "‚ùå Bundle size ($SIZE) exceeds limit ($MAX_SIZE)"
            exit 1
          fi
          echo "‚úÖ Bundle size: $SIZE bytes"
          
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: extension-build
          path: dist/

  # Job 4: E2E Tests
  e2e:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Install Playwright
        run: npx playwright install --with-deps chromium
        
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: extension-build
          path: dist/
          
      - name: Run E2E tests
        run: npm run test:e2e
        
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: e2e-results
          path: test-results/

  # Job 5: Performance Tests
  performance:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          
      # Lighthouse CI disabled - not applicable for Chrome extensions
      # Extensions don't have their own URLs to test
      # - name: Run Lighthouse CI
      #   run: |
      #     npm install -g @lhci/cli
      #     lhci autorun
          
      - name: Install dependencies
        run: npm ci
        
      - name: Memory leak detection
        run: npm run test:memory

  # Job 6: Deploy to Staging
  deploy-staging:
    runs-on: ubuntu-latest
    needs: [lint, test, build, e2e, performance]
    if: github.ref == 'refs/heads/develop'
    steps:
      - uses: actions/checkout@v4
      
      - name: Deploy to staging
        run: |
          echo "üöÄ Deploying to staging environment"
          # Add your deployment script here
          
      - name: Notify Slack
        uses: slackapi/slack-github-action@v1.24.0
        with:
          payload: |
            {
              "text": "üöÄ BoldTake deployed to staging",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Deployment Complete*\n‚Ä¢ Environment: Staging\n‚Ä¢ Version: ${{ github.sha }}\n‚Ä¢ Author: ${{ github.actor }}"
                  }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

  # Job 7: Production Release
  release:
    runs-on: ubuntu-latest
    needs: [lint, test, build, e2e, performance]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - uses: actions/checkout@v4
      
      - name: Create Release
        run: |
          echo "üì¶ Creating production release"
          # Add Chrome Web Store deployment here
          
      - name: Configure Git
        run: |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "GitHub Actions Bot"
      
      - name: Tag release
        run: |
          VERSION=$(node -p "require('./manifest.json').version")
          git tag -a "v$VERSION" -m "Release v$VERSION" || echo "Tag already exists"
          git push origin "v$VERSION" || echo "Tag already pushed"
